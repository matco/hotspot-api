/*
 * This file is generated by jOOQ.
 */
package name.matco.hotspot.model.jooq;


import name.matco.hotspot.model.jooq.tables.RevokedToken;
import name.matco.hotspot.model.jooq.tables.Spot;
import name.matco.hotspot.model.jooq.tables.Stash;
import name.matco.hotspot.model.jooq.tables.StashSpot;
import name.matco.hotspot.model.jooq.tables.Users;
import name.matco.hotspot.model.jooq.tables.records.RevokedTokenRecord;
import name.matco.hotspot.model.jooq.tables.records.SpotRecord;
import name.matco.hotspot.model.jooq.tables.records.StashRecord;
import name.matco.hotspot.model.jooq.tables.records.StashSpotRecord;
import name.matco.hotspot.model.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<RevokedTokenRecord> KEY_REVOKED_TOKEN_PRIMARY = Internal.createUniqueKey(RevokedToken.REVOKED_TOKEN, DSL.name("KEY_revoked_token_PRIMARY"), new TableField[] { RevokedToken.REVOKED_TOKEN.TOKEN }, true);
	public static final UniqueKey<SpotRecord> KEY_SPOT_PRIMARY = Internal.createUniqueKey(Spot.SPOT, DSL.name("KEY_spot_PRIMARY"), new TableField[] { Spot.SPOT.PK }, true);
	public static final UniqueKey<SpotRecord> KEY_SPOT_SPOT_UUID = Internal.createUniqueKey(Spot.SPOT, DSL.name("KEY_spot_spot_uuid"), new TableField[] { Spot.SPOT.UUID }, true);
	public static final UniqueKey<StashRecord> KEY_STASH_PRIMARY = Internal.createUniqueKey(Stash.STASH, DSL.name("KEY_stash_PRIMARY"), new TableField[] { Stash.STASH.PK }, true);
	public static final UniqueKey<StashRecord> KEY_STASH_STASH_UUID = Internal.createUniqueKey(Stash.STASH, DSL.name("KEY_stash_stash_uuid"), new TableField[] { Stash.STASH.UUID }, true);
	public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.PK }, true);
	public static final UniqueKey<UsersRecord> KEY_USERS_USER_EMAIL = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_user_email"), new TableField[] { Users.USERS.EMAIL }, true);
	public static final UniqueKey<UsersRecord> KEY_USERS_USER_HANDLE = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_user_handle"), new TableField[] { Users.USERS.HANDLE }, true);

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<SpotRecord, UsersRecord> SPOT_USER = Internal.createForeignKey(Spot.SPOT, DSL.name("spot_user"), new TableField[] { Spot.SPOT.USER_FK }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.PK }, true);
	public static final ForeignKey<StashRecord, UsersRecord> STASH_USER = Internal.createForeignKey(Stash.STASH, DSL.name("stash_user"), new TableField[] { Stash.STASH.USER_FK }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.PK }, true);
	public static final ForeignKey<StashSpotRecord, SpotRecord> SPOT = Internal.createForeignKey(StashSpot.STASH_SPOT, DSL.name("spot"), new TableField[] { StashSpot.STASH_SPOT.SPOT_FK }, Keys.KEY_SPOT_PRIMARY, new TableField[] { Spot.SPOT.PK }, true);
	public static final ForeignKey<StashSpotRecord, StashRecord> STASH = Internal.createForeignKey(StashSpot.STASH_SPOT, DSL.name("stash"), new TableField[] { StashSpot.STASH_SPOT.STASH_FK }, Keys.KEY_STASH_PRIMARY, new TableField[] { Stash.STASH.PK }, true);
}
