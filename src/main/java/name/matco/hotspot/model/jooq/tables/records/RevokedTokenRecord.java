/*
 * This file is generated by jOOQ.
 */
package name.matco.hotspot.model.jooq.tables.records;


import java.time.ZonedDateTime;

import name.matco.hotspot.model.jooq.tables.RevokedToken;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RevokedTokenRecord extends UpdatableRecordImpl<RevokedTokenRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * Setter for <code>revoked_token.token</code>.
	 */
	public void setToken(String value) {
		set(0, value);
	}

	/**
	 * Getter for <code>revoked_token.token</code>.
	 */
	public String getToken() {
		return (String) get(0);
	}

	/**
	 * Setter for <code>revoked_token.expiration_date</code>.
	 */
	public void setExpirationDate(ZonedDateTime value) {
		set(1, value);
	}

	/**
	 * Getter for <code>revoked_token.expiration_date</code>.
	 */
	public ZonedDateTime getExpirationDate() {
		return (ZonedDateTime) get(1);
	}

	/**
	 * Setter for <code>revoked_token.user_fk</code>.
	 */
	public void setUserFk(Integer value) {
		set(2, value);
	}

	/**
	 * Getter for <code>revoked_token.user_fk</code>.
	 */
	public Integer getUserFk() {
		return (Integer) get(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached RevokedTokenRecord
	 */
	public RevokedTokenRecord() {
		super(RevokedToken.REVOKED_TOKEN);
	}

	/**
	 * Create a detached, initialised RevokedTokenRecord
	 */
	public RevokedTokenRecord(String token, ZonedDateTime expirationDate, Integer userFk) {
		super(RevokedToken.REVOKED_TOKEN);

		setToken(token);
		setExpirationDate(expirationDate);
		setUserFk(userFk);
		resetChangedOnNotNull();
	}
}
