/*
 * This file is generated by jOOQ.
 */
package name.matco.hotspot.model.jooq.tables;


import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import name.matco.hotspot.model.jooq.DefaultSchema;
import name.matco.hotspot.model.jooq.Indexes;
import name.matco.hotspot.model.jooq.Keys;
import name.matco.hotspot.model.jooq.tables.records.RevokedTokenRecord;
import name.matco.hotspot.services.jooq.configuration.DateConverter;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RevokedToken extends TableImpl<RevokedTokenRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>revoked_token</code>
	 */
	public static final RevokedToken REVOKED_TOKEN = new RevokedToken();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RevokedTokenRecord> getRecordType() {
		return RevokedTokenRecord.class;
	}

	/**
	 * The column <code>revoked_token.token</code>.
	 */
	public final TableField<RevokedTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

	/**
	 * The column <code>revoked_token.expiration_date</code>.
	 */
	public final TableField<RevokedTokenRecord, ZonedDateTime> EXPIRATION_DATE = createField(DSL.name("expiration_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "", new DateConverter());

	/**
	 * The column <code>revoked_token.user_fk</code>.
	 */
	public final TableField<RevokedTokenRecord, Integer> USER_FK = createField(DSL.name("user_fk"), SQLDataType.INTEGER.nullable(false), this, "");

	private RevokedToken(Name alias, Table<RevokedTokenRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private RevokedToken(Name alias, Table<RevokedTokenRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>revoked_token</code> table reference
	 */
	public RevokedToken(String alias) {
		this(DSL.name(alias), REVOKED_TOKEN);
	}

	/**
	 * Create an aliased <code>revoked_token</code> table reference
	 */
	public RevokedToken(Name alias) {
		this(alias, REVOKED_TOKEN);
	}

	/**
	 * Create a <code>revoked_token</code> table reference
	 */
	public RevokedToken() {
		this(DSL.name("revoked_token"), null);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.REVOKED_TOKEN_REVOKED_TOKEN_USER);
	}

	@Override
	public UniqueKey<RevokedTokenRecord> getPrimaryKey() {
		return Keys.KEY_REVOKED_TOKEN_PRIMARY;
	}

	@Override
	public RevokedToken as(String alias) {
		return new RevokedToken(DSL.name(alias), this);
	}

	@Override
	public RevokedToken as(Name alias) {
		return new RevokedToken(alias, this);
	}

	@Override
	public RevokedToken as(Table<?> alias) {
		return new RevokedToken(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RevokedToken rename(String name) {
		return new RevokedToken(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RevokedToken rename(Name name) {
		return new RevokedToken(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RevokedToken rename(Table<?> name) {
		return new RevokedToken(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken where(Condition condition) {
		return new RevokedToken(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RevokedToken where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RevokedToken where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RevokedToken where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RevokedToken where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RevokedToken whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
